
  # Standardize the data:
  data {
    ym <- mean(y)
    ysd <- sd(y)
    ymin <- min(y)
    for ( i in 1:Ntotal ) {
      zy[i] <- ( y[i] - ym ) / ysd
    }
    for ( j in 1:Nx ) {
      xm[j]  <- mean(x[,j])
      xsd[j] <-   sd(x[,j])
      for ( i in 1:Ntotal ) {
        zx[i,j] <- ( x[i,j] - xm[j] ) / xsd[j]
      }
    }

    # Specify the priors for original beta parameters
    # Prior locations to reflect the expert information
    mu0 <- ymin/2 # A dwelling with no area, no bedrooms, no bathrooms, no car parks, and is neither property type conceptually does not exist
    mu[1] <- 90 # Area
    mu[2] <- 100000 # Bedrooms
    mu[3] <- ym # Bathrooms, mean of y
    mu[4] <- 120000 # CarParks
    mu[5] <- -150000 # PropertyType

    # Prior variances to reflect the expert information    
    Var0   <- (ysd^2)
    Var[1] <- ((ysd)*0.1) # Area
    Var[2] <- ((ysd)*0.75) # Bedrooms
    Var[3] <- ((ysd)*5) # Bathrooms
    Var[4] <- ((ysd)*0.25) # CarParks
    Var[5] <- ((ysd)*0.1) # PropertyType

    # Compute corresponding prior means and variances for the standardised parameters
    muZ[1:Nx] <-  mu[1:Nx] * xsd[1:Nx] / ysd

    muZ0 <- (mu0 + sum( mu[1:Nx] * xm[1:Nx] / xsd[1:Nx] )*ysd - ym) / ysd 

    # Compute corresponding prior variances and variances for the standardised parameters
    VarZ[1:Nx] <- Var[1:Nx] * ( xsd[1:Nx]/ ysd )^2
    VarZ0 <- ((Var0)*75000) / (ysd^2)

  }
  # Specify the model for standardized data:
  model {
    for ( i in 1:Ntotal ) {
      zy[i] ~ dt( zbeta0 + sum( zbeta[1:Nx] * zx[i,1:Nx] ) , 1/zsigma^2 , nu )
    }

    # Priors vague on standardized scale:
    zbeta0 ~ dnorm( muZ0 , 1/VarZ0 )  
    for ( j in 1:Nx ) {
      zbeta[j] ~ dnorm( muZ[j] , 0.01/VarZ[j] )
    }
    zsigma ~ dgamma(0.001,0.001) #dunif( 1.0E-5 , 1.0E+1 )
    nu ~ dexp(1/30.0)

    # Transform to original scale:
    beta[1:Nx] <- ( zbeta[1:Nx] / xsd[1:Nx] )*ysd
    beta0 <- zbeta0*ysd  + ym - sum( zbeta[1:Nx] * xm[1:Nx] / xsd[1:Nx] )*ysd
    sigma <- zsigma*ysd

    # Compute predictions at every step of the MCMC
    Prediction1 <- beta0 + (beta[1] * Pred1[1]) + (beta[2] * Pred1[2]) + (beta[3] * Pred1[3]) + (beta[4] * Pred1[4])
            + (beta[5] * Pred1[5])

    Prediction2 <- beta0 + (beta[1] * Pred2[1]) + (beta[2] * Pred2[2]) + (beta[3] * Pred2[3]) + (beta[4] * Pred2[4])
            + (beta[5] * Pred2[5])

    Prediction3 <- beta0 + (beta[1] * Pred3[1]) + (beta[2] * Pred3[2]) + (beta[3] * Pred3[3]) + (beta[4] * Pred3[4])
            + (beta[5] * Pred3[5])

    Prediction4 <- beta0 + (beta[1] * Pred4[1]) + (beta[2] * Pred4[2]) + (beta[3] * Pred4[3]) + (beta[4] * Pred4[4])
            + (beta[5] * Pred4[5])

    Prediction5 <- beta0 + (beta[1] * Pred5[1]) + (beta[2] * Pred5[2]) + (beta[3] * Pred5[3]) + (beta[4] * Pred5[4])
            +( beta[5] * Pred5[5])
  }
  
